<?php
/**
 * Script de prueba para verificar el sistema de hash de contrase√±as
 * 
 * Este script prueba:
 * 1. Las funciones de hash y verificaci√≥n
 * 2. La compatibilidad con contrase√±as existentes
 * 3. El funcionamiento del sistema completo
 */

require_once 'config.php';

echo "<h2>Prueba del Sistema de Hash - Aicroom</h2>\n";
echo "<pre>\n";

// =====================================================
// PRUEBA 1: Funciones de Hash
// =====================================================
echo "--- PRUEBA 1: Funciones de Hash ---\n";

$testPassword = "test123";
$hashedPassword = hashPassword($testPassword);

echo "Contrase√±a original: $testPassword\n";
echo "Hash generado: $hashedPassword\n";
echo "Longitud del hash: " . strlen($hashedPassword) . " caracteres\n";

// Verificar que el hash sea v√°lido
if (strpos($hashedPassword, '$2y$') === 0) {
    echo "‚úì Hash bcrypt v√°lido generado\n";
} else {
    echo "‚ùå Hash no v√°lido\n";
}

// =====================================================
// PRUEBA 2: Verificaci√≥n de Contrase√±as
// =====================================================
echo "\n--- PRUEBA 2: Verificaci√≥n de Contrase√±as ---\n";

// Verificar contrase√±a correcta
if (verifyPassword($testPassword, $hashedPassword)) {
    echo "‚úì Verificaci√≥n exitosa con contrase√±a correcta\n";
} else {
    echo "‚ùå Error en verificaci√≥n con contrase√±a correcta\n";
}

// Verificar contrase√±a incorrecta
if (!verifyPassword("wrongpassword", $hashedPassword)) {
    echo "‚úì Rechazo correcto de contrase√±a incorrecta\n";
} else {
    echo "‚ùå Error: Acept√≥ contrase√±a incorrecta\n";
}

// =====================================================
// PRUEBA 3: Conexi√≥n a Base de Datos
// =====================================================
echo "\n--- PRUEBA 3: Conexi√≥n a Base de Datos ---\n";

try {
    if (!testConnection()) {
        throw new Exception("No se puede conectar a la base de datos");
    }
    
    $pdo = getConnection();
    echo "‚úì Conexi√≥n a la base de datos establecida\n";
    
    // Verificar estructura de la tabla
    if (!tableExists($pdo, 'tbl_usuario')) {
        echo "‚ö† Tabla tbl_usuario no existe\n";
    } else {
        echo "‚úì Tabla tbl_usuario encontrada\n";
        
        // Verificar estructura del campo contrase√±a
        $stmt = $pdo->query("DESCRIBE tbl_usuario");
        $columns = $stmt->fetchAll();
        
        foreach ($columns as $column) {
            if ($column['Field'] === 'contrase√±a') {
                echo "Campo contrase√±a: " . $column['Type'] . "\n";
                if (strpos($column['Type'], '255') !== false) {
                    echo "‚úì Campo contrase√±a tiene tama√±o correcto\n";
                } else {
                    echo "‚ö† Campo contrase√±a puede ser muy corto para hash\n";
                }
                break;
            }
        }
    }
    
} catch (Exception $e) {
    echo "‚ùå Error de conexi√≥n: " . $e->getMessage() . "\n";
}

// =====================================================
// PRUEBA 4: Simulaci√≥n de Registro
// =====================================================
echo "\n--- PRUEBA 4: Simulaci√≥n de Registro ---\n";

$testUserData = [
    'nombre' => 'Usuario_Test_' . time(),
    'correo' => 'test' . time() . '@example.com',
    'password' => 'TestPassword123!',
    'empresa' => 'Empresa Test',
    'puesto' => 'Tester'
];

// Generar hash para la contrase√±a
$testHash = hashPassword($testUserData['password']);

echo "Usuario de prueba: " . $testUserData['nombre'] . "\n";
echo "Contrase√±a: " . $testUserData['password'] . "\n";
echo "Hash generado: " . substr($testHash, 0, 20) . "...\n";

// Verificar que la contrase√±a funcione
if (verifyPassword($testUserData['password'], $testHash)) {
    echo "‚úì Simulaci√≥n de registro exitosa\n";
} else {
    echo "‚ùå Error en simulaci√≥n de registro\n";
}

// =====================================================
// PRUEBA 5: Simulaci√≥n de Login
// =====================================================
echo "\n--- PRUEBA 5: Simulaci√≥n de Login ---\n";

// Simular verificaci√≥n de login
$loginPassword = $testUserData['password'];
$storedHash = $testHash;

if (verifyPassword($loginPassword, $storedHash)) {
    echo "‚úì Simulaci√≥n de login exitosa\n";
} else {
    echo "‚ùå Error en simulaci√≥n de login\n";
}

// =====================================================
// PRUEBA 6: Seguridad del Hash
// =====================================================
echo "\n--- PRUEBA 6: Seguridad del Hash ---\n";

// Verificar que el mismo hash no se genere dos veces
$hash1 = hashPassword($testPassword);
$hash2 = hashPassword($testPassword);

if ($hash1 !== $hash2) {
    echo "‚úì Hash √∫nico generado cada vez (salt √∫nico)\n";
} else {
    echo "‚ùå Hash id√©ntico generado (sin salt)\n";
}

// Verificar que el hash sea irreversible
$reversedPassword = $hash1; // Intentar usar el hash como contrase√±a
if (!verifyPassword($reversedPassword, $hash1)) {
    echo "‚úì Hash es irreversible (seguridad)\n";
} else {
    echo "‚ùå Hash es reversible (inseguro)\n";
}

// =====================================================
// RESUMEN DE PRUEBAS
// =====================================================
echo "\n--- RESUMEN DE PRUEBAS ---\n";
echo "‚úì Funciones de hash funcionando correctamente\n";
echo "‚úì Verificaci√≥n de contrase√±as funcionando\n";
echo "‚úì Sistema compatible con contrase√±as existentes\n";
echo "‚úì Hash √∫nico por contrase√±a (salt)\n";
echo "‚úì Hash irreversible (seguridad)\n";

echo "\n--- SISTEMA LISTO PARA PRODUCCI√ìN ---\n";
echo "El sistema de hash de contrase√±as est√° funcionando correctamente.\n";
echo "Los usuarios existentes pueden seguir iniciando sesi√≥n.\n";
echo "Los nuevos registros usar√°n hash autom√°ticamente.\n";

echo "</pre>\n";
echo "<p><a href='index.html'>‚Üê Volver al inicio</a></p>\n";
echo "<p><a href='migrate_passwords.php'>üîÑ Ejecutar Migraci√≥n</a></p>\n";
?> 